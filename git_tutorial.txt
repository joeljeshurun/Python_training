Command: git init
Description: To initialize a Git repository here, type the following command:

Command: git status
Description: the git status command to see what the current state of our project is:

Command: git add octocat.txt
Description: To tell Git to start tracking changes made to octocat.txt, we first need to add it to the staging area by using  git add.

Command: git commit -m "Add cute octocat story"
Description: To store our staged changes we run the commit command with a message describing what we've changed.

Command: git add '*.txt'
Description: we can add all the new files using a wildcard with git add. Don't forget the quotes!

Command: git log
Description: git log. Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them.

Command: git remote add origin https://github.com/try-git/try_git.git
Description: This command takes a remote name and a repository URL,

Command: git push -u origin master
Description: The push command tells Git where to put our commits when we're ready, and now we're ready. So let's push our local changes to our origin repo (on GitHub). The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do.

Command: git pull origin master
Description: We can check for changes on our GitHub repository and pull down any new changes by running

Command: git diff HEAD
Description: take a look at what is  different from our last commit by using the git diff command. In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.

Command: git add octofamily/octodog.txt
Description: Another great use for diff is looking at changes within files that have already been staged. Remember, staged files are files we have told git that are ready to be committed. Use git add to stage octofamily/octodog.txt

Command: git diff --staged
Description: git diff with the --staged option to see the changes you just staged. You should see that octodog.txt was created.

Command: git reset octofamily/octodog.txt
Description: unstage files by using the git reset command.

Command: git checkout -- octocat.txt
Description: Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. 

Command: git branch clean_up
Description: create a branch called clean_up

Command: git checkout clean_up
Description: switch branches using the git checkout <branch> command

Command: git rm '*.txt'
Description: remove all files with this extension

Command: git commit -m "Remove all the cats"
Description: commiting the changes

Command: git checkout master
Description: checkout the master branch

Command:git merge clean_up
Description: merging to master branch

Command: git branch -d clean_up
Description: use git branch -d <branch name> to delete a branch.

Command: git push
Description: push the changes